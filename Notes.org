* Useful Setup Tricks
*** Browser Sync
    - from Google https://www.browsersync.io/
    - install:
      #+BEGIN_SRC sh
      npm install -g browser-sync
      #+END_SRC
    - start:
      #+BEGIN_SRC sh :directory ./docs
      browser-sync start --server --directory --files "*" &
      #+END_SRC
* Useful HTML tricks
*** Lists
    - anything in a <ul> element that's not a <li> is not allowed
*** Charecters
***** Always Use Entities:
      - < :: &lt;
      - > :: &gt;
      - & :: &amp;
      - (c) :: &copy;
      - space :: &nbsp; don't use just for spacing, use a span.
      - quote :: &quote;
***** 
* CSS3
*** CSS Rule
***** selector
******* element
        - specified by a string: p
******* class
        - specified by a dot: .blue {color: blue;}
        - used without dot: <p class="blue">...</p>
******* id
        - specified by a hash: #name { color: blue;}
        - also used without hash: <div id="name">...</div>
******* grouping selectors:
        #+BEGIN_SRC css
          div, .blue {
              color: blue;
          }
        #+END_SRC
******* combining selectors
********* element with class slector
          #+BEGIN_SRC css
            /*Every p that has class="big" */
            p.big {
                font-size: 20px;
          #+END_SRC
********* child direct selector
          #+BEGIN_SRC css
          article > p { color: rebeccapurple;
          #+END_SRC
          #+BEGIN_SRC html
            <article> <p> affected text </p> </article>
            <p> unaffected text </p>
            <article><div><p>affected text</p></div></article>
          #+END_SRC
********* descendant selector
          Every x that isinside (at any level) of y
          #+BEGIN_SRC css
          article p { color: pink; }
          #+END_SRC
          #+BEGIN_SRC html
          
          #+END_SRC
********* adjacent sibling selector (selector + selector)
********* general sibling selector (selector - selector)
******* pseudo-class selector
        #+BEGIN_SRC css
        selector:pseudo-class
        #+END_SRC
        there are many.  amongs them:
        - :link
        - :visited
        - :hover
        - :active
        - :nth-child(...)
          #+BEGIN_SRC css
            /* will affect the third list item*/
            header li:nth-child(3){font-size: 24px;}
            /* apply to evey other element */
            section div:nth-child(odd){background-color: grey;}
            /* combine pseudo selecectors */
            section div:nth-child(4):hover {color: chartreuse; cursor: pointer;}
          #+END_SRC
***** braces
***** declaration
******* property
******* colon
******* value
******* semicolon
*** Style Placement
***** in header, in line, in a css sheet
      don't use inline, use a css sheet
*** Conflict Resolution
***** Cascade Algorithm: the core of CSS
******* Origin
        the LAST declatation wins:
        styles below on page, overide those above
******* Merge
        when styles don't conflict, they combine
******* Inheritance
        all children and grand children of element will inherit
        property
******* Specificiy
        Most specific selector combination wins
        style="" > ID > class, pseudoclass, attribute > number of elements
******* !important
        overrides other CSS styles
        #+BEGIN_SRC css
        p {color: darkseagreen !important;}
        #+END_SRC
***** 
*** Styling Text
***** font-family
      provide some options
***** color
      color names for testing, hex values for production (why?)
***** font-weight
      normal to bold (900)
***** font-size
***** text-transform
      capitalize, lowecase, et c.
***** justification
***** relative font sizing
******* %
        120% = 120% bigger than default (usuall 16 pixels)
******* ems
        2em text is twice the size of the letter M
******* relative font sizes are cumulative!
        decrease it to get back to default
*** Box Model
    - padding
    - border
    - margins
***** border-box vs content-box
      stay with border box, content-box is default in plain browsers,
      border-box in frameworks (boot strap) so just indicate border
      box to save on confusion.
***** use STAR * selector because body-box property isn't inheritable
      - * (strar) :: appleis proberty and values to _every_ element.
***** can I use?  caniuse.com
***** cumulative margins:
      margins collapse top and down, and the smaller margin collapses
***** overdflow:  what happens when there's too much test for your box
      - auto :: puts scroll bars as needed
      - scroll :: bars always visiable
***** background: lots of fun properties
      - bacground-image :: can specify a file (URL relative to CSS file)
      - background-repeat :: repeat x, y, or no repeat
      - background-position :: will default other posotions in the center
      
*** position elements by floating
    most UIs made today are made by floating
    - margins never collapse
    - floating elements takes them out of the normall document flow
    - use the 'clear' attribute to resume document flow

*** relative and absolute positioning
    - static posotioning: standard for all, excelt html
    - relative positioning
      - properties :: left, right, etc.
      - FROM top and FROM left :: still in document flow. can use
           negative values
    - absulute :: all ofsets are relative to the position
    - document flow :: absolute postioning takes element out of it
*** COMMENT Media Queries
    - @media (max-width: 767 px) { p { clolor: blue; }}
    - possible targets:
      - max-width:
      - min-width:
      - orientation:
      - secreen
      - print:
    - can be combined using logical operators
      #+BEGIN_SRC css
        @media (min-width: 768) and (max-width: 991px) {p {font-family: serif;}}
      #+END_SRC
    - comma is equivalent to an "OR" operator
      #+BEGIN_SRC css
        @media (max-width: 767px) , (min-width: 992) {...}
      #+END_SRC
    - base stylles apply to media queries, so define them first.
    - 
*** different devices sizes:  twitter bootstrap has defined ranges
*** REMEBER NOT TO OVERLAP BREAKPOINTS
*** Responsive Layouts
***** 12 column grid --- used by most responsive designs
      - 1 column :: 100%
      - 12 columns :: each 8.33% * 12 = 100%
      - 4 columns :: 25% et c.
      - nested grids :: inside each column you can nest more grids
*** viewport metatag:
    tells devices our page is responsive, and not to zoom it out automatically
    #+BEGIN_SRC html
      <meta name="viewport" content="width=device-width, initial-scale=1'>
    #+END_SRC

*** 
* Ajax Basics
  Asynchronous Javascript and XML
*** How can JS, a synchronous language, be asynchronous?
